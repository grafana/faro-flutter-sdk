---
description: Cursor Rules organization and file structure standards
globs: ["**/*.mdc", ".cursorrules"]
alwaysApply: true
---

# Cursor Rules Organization

Modern standards for organizing Cursor AI rules and configuration files in the repository.

## File Structure Standards

### Primary Configuration
- **`.cursorrules`**: Main configuration file in project root
  - Contains project-specific AI behavior guidelines
  - Uses plain text format with markdown-style sections
  - Single source of truth for general development patterns

### Supplementary Rules (Optional)
- **`.cursor/rules/*.mdc`**: Specialized rule files for specific contexts
  - Use for complex, conditional, or domain-specific rules
  - Organize by functional area (e.g., architecture, testing, protocols)
  - Apply to specific file patterns or development scenarios

## Current 2024/2025 Best Practices

### File Placement
```
PROJECT_ROOT/
├── .cursorrules                    # Primary rules (REQUIRED)
├── .cursor/
│   └── rules/                      # Supplementary rules (OPTIONAL)
│       ├── project-context.mdc     # Project-specific context
│       ├── architecture-rules.mdc  # Architecture guidelines
│       └── protocol-specs.mdc      # Domain-specific protocols
└── ...
```

### Naming Conventions
- **`.cursorrules`**: Always this exact filename in root
- **`.mdc files`**: Use kebab-case, descriptive names
- **Descriptive**: Names should indicate purpose (e.g., `faro-protocol.mdc`)

### Content Guidelines

#### For .cursorrules (Primary)
- Focus on general development patterns
- Include language/framework specific guidelines
- Define code style and architecture preferences
- Keep concise but comprehensive

#### For .mdc files (Supplementary)
- Use YAML frontmatter for metadata:
  ```yaml
  ---
  description: Brief description of rule purpose
  globs: ["**/*.dart", "**/*.swift"]  # File patterns to apply to
  alwaysApply: true/false             # Whether to apply automatically
  ---
  ```
- Include detailed context and examples
- Focus on specific domains or complex scenarios

## Integration Strategy

### Migration from Legacy Patterns
1. **Primary rules** → Move to `.cursorrules` in root
2. **Complex rules** → Keep as `.mdc` files in `.cursor/rules/`
3. **Update metadata** → Add proper YAML frontmatter
4. **Consolidate overlaps** → Avoid duplication between files

### Maintenance
- Keep `.cursorrules` as the primary entry point
- Use `.mdc` files for specialized contexts only
- Regular review to ensure rules stay current
- Update based on framework/language evolution

## Quality Standards

### Content Quality
- **Specificity**: Rules should be specific to project needs
- **Clarity**: Clear, actionable guidelines
- **Currency**: Updated for latest framework versions
- **Completeness**: Cover common development scenarios

### Organization
- **Hierarchy**: General rules in `.cursorrules`, specific in `.mdc`
- **Modularity**: Each `.mdc` file should have a clear, focused purpose
- **Documentation**: Include examples and rationale
- **Consistency**: Follow established patterns across all rule files

This structure balances simplicity (single `.cursorrules` file) with flexibility (specialized `.mdc` files) while following current Cursor AI best practices.

