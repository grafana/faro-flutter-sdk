---
description: Faro Flutter SDK project overview and development context
globs: ["**/*.dart", "**/*.swift", "**/*.java", "**/*.kt"]
alwaysApply: true
---

# Faro Flutter SDK - Development Context

## Project Overview

This is a **production-grade Flutter SDK** that implements the Grafana Faro protocol for mobile observability. It's designed as a professional monitoring solution for Flutter applications, providing comprehensive insights into app performance, user interactions, errors, and distributed tracing.

**Target Users**: Flutter developers integrating observability into production mobile applications.

## Core Architecture

### SDK Structure
- **Public API**: Located in `lib/` root (`faro.dart`, `faro_sdk.dart`)
- **Internal Implementation**: All implementation details in `lib/src/`
- **Platform Integration**: Native iOS (Swift) and Android (Java/Kotlin) code
- **Transport Layer**: Batching, offline handling, and network optimization

### Key Components

#### Data Collection
- **Logs**: Application logs and custom messages
- **Exceptions**: Automatic and manual error tracking
- **Measurements**: Performance metrics (CPU, memory, frame rates)
- **Events**: User interactions and application lifecycle
- **Traces**: Distributed tracing with OpenTelemetry integration

#### Platform Features
- **iOS**: Crash reporting (PLCrashReporter), app lifecycle, performance vitals
- **Android**: ANR detection, application exit info, memory monitoring
- **Cross-platform**: Session management, device info, connectivity tracking

## Technical Implementation

### Dependencies & Integration
- **OpenTelemetry**: For distributed tracing standards
- **Platform Channels**: Native iOS/Android integration
- **HTTP Client**: Network request monitoring via custom client
- **Widget System**: Observer patterns for UI interactions

### Data Flow Architecture
1. **Collection**: Automatic and manual data gathering
2. **Processing**: Metadata enrichment and formatting
3. **Batching**: Efficient grouping for network transport
4. **Transport**: Reliable delivery with offline support
5. **Endpoint**: Grafana Cloud Faro receivers

### Configuration System
- **Data Collection Policies**: Privacy-focused, configurable data collection
- **Transport Options**: Batching, retry logic, timeout settings  
- **Integration Settings**: Custom instrumentations and filters

## Development Patterns

### SDK Design Principles
- **Minimal Impact**: Low overhead on host applications
- **Privacy First**: Configurable data collection with user consent
- **Production Ready**: Robust error handling and edge case management
- **Developer Experience**: Simple integration with sensible defaults

### Code Organization
```
lib/
├── faro.dart                 # Main public API
├── faro_sdk.dart            # SDK initialization
├── src/
│   ├── configurations/      # Config objects and policies
│   ├── device_info/         # Device and session management
│   ├── integrations/        # Framework integrations
│   ├── models/              # Data models and serialization
│   ├── transport/           # Network and batching logic
│   ├── tracing/             # OpenTelemetry integration
│   └── util/                # Shared utilities
ios/Classes/                 # iOS-specific implementation
android/src/main/java/       # Android-specific implementation
```

### Quality Standards
- **Testing**: Comprehensive unit, widget, and integration tests
- **Documentation**: Full API documentation with examples
- **Performance**: Benchmarked impact on app startup and runtime
- **Compatibility**: Support for Flutter 3.x and latest platform versions

## Integration Context

### Typical Usage Pattern
```dart
// Initialize once in main()
await FaroSdk.initialize(
  config: FaroConfig(
    appName: 'MyApp',
    version: '1.0.0',
    collectorUrl: 'https://...',
    apiKey: '...',
  ),
);

// Wrap app with monitoring
class MyApp extends StatelessWidget {
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorObservers: [FaroNavigationObserver()],
      // ... app configuration
    );
  }
}
```

### Production Considerations
- **Data Volume**: Configurable sampling and filtering
- **Network Usage**: Batching and compression for efficiency
- **Battery Impact**: Background processing optimization
- **Storage**: Local caching with size limits
- **Privacy**: GDPR/compliance-ready data collection controls

This SDK is maintained by Grafana Labs and follows enterprise-grade development standards.

