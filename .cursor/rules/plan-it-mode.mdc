---
description: 
globs: 
alwaysApply: false
---

# PlanIt Mode - Structured Development Approach

This rule provides a systematic approach to complex development tasks, ensuring thorough planning before implementation.

## When to Apply

Apply this methodology when:
- User message starts with "PlanIt:"
- Complex features requiring multiple steps
- Tasks affecting multiple files/systems
- Architecture changes or refactoring
- Integration of new technologies

## Process Flow

### 1. Analysis Phase (STOP AND PLAN FIRST)
**Critical**: Do NOT start implementing until analysis is complete.

**Requirements Analysis**:
- Parse and clarify user requirements
- Identify scope and constraints
- Review relevant codebase sections
- Document assumptions and dependencies
- Suggest clarifications if needed

**Impact Assessment**:
- Identify affected components
- Consider backwards compatibility
- Evaluate performance implications
- Assess testing requirements

### 2. Planning Phase
**Create structured plan in `.cursor_tasks/<task_name>.md`**:

```markdown
# Task: [Descriptive Task Name]
Created: [YYYY-MM-DD]

## Overview
[Detailed description of what needs to be accomplished and why]

## Requirements
- [ ] Requirement 1
- [ ] Requirement 2

## Action Plan
- [ ] Step 1: [Detailed description]
  - [ ] Substep 1.1
  - [ ] Substep 1.2
- [ ] Step 2: [Detailed description]
- [ ] Step 3: [Detailed description]

## Technical Considerations
- Architecture impacts
- Dependencies to add/update
- Testing strategy
- Documentation updates

## Progress Log
- [YYYY-MM-DD HH:MM] Task created
```

**Get Explicit Approval**: 
STOP and ask: "Does this plan look good? Should I proceed with implementation?"

### 3. Implementation Phase
**Only after user approval**:
- Execute planned steps sequentially
- Update progress log continuously
- Document decisions and discoveries
- Adapt plan as needed (with user notification)

### 4. Learning Phase
**Continuous improvement**:
- Document lessons learned
- Update cursor rules if patterns emerge
- Note successful approaches for future use

## Best Practices

### Communication
- Be explicit about what you're doing and why
- Provide context for all decisions
- Seek clarification for ambiguous requirements
- Regular progress updates for long tasks

### Planning Quality
- Break complex tasks into manageable steps
- Consider edge cases and error scenarios
- Plan for testing and validation
- Include documentation updates

### Execution Discipline
- Follow the plan but adapt when necessary
- Document all changes and reasons
- Test incrementally when possible
- Validate each step before proceeding

### Documentation
- Keep the task file updated throughout
- Document not just what was done, but why
- Include troubleshooting notes for future reference
- Update project documentation as needed

## Integration with Faro SDK Development

For this project specifically:
- Consider impact on public API stability
- Plan for both iOS and Android platform changes
- Include integration testing in plan
- Consider data collection policy implications
- Plan for backwards compatibility
- Include performance testing for SDK overhead

## Success Criteria

A successful PlanIt execution should result in:
- ✅ Clear, approved plan before implementation
- ✅ Systematic execution with progress tracking
- ✅ Complete documentation of changes
- ✅ Working, tested implementation
- ✅ Updated project documentation
- ✅ Lessons learned documented for future use